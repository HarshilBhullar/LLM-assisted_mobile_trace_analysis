Prompt: I want you to create an outer analyzer script that uses a custom analyzer class defined in a separate inner analyzer file named `modem_debug_analyzer.py`. This outer script should process cellular logs using the MobileInsight framework.

1. **Setup and Initialization:**
   - Import necessary modules from the MobileInsight library, specifically `OfflineReplayer`, `MsgLogger`, and the custom `ModemDebugAnalyzer` class from `modem_debug_analyzer.py`.
   - Initialize an `OfflineReplayer` to handle log files located in a directory named `./logs/`.

2. **Log Configuration:**
   - Enable specific logs related to cellular events such as `LTE_PHY_Serv_Cell_Measurement`, `5G_NR_RRC_OTA_Packet`, `LTE_RRC_OTA_Packet`, and `LTE_NB1_ML1_GM_DCI_Info`.
   - Set up an instance of `MsgLogger` to log messages from these events. The logger should output XML formatted messages to a file named `modified_test.txt`.

3. **Custom Analyzer Integration:**
   - Integrate the `ModemDebugAnalyzer` from the `modem_debug_analyzer.py` file. Set the source of this analyzer to the initialized `OfflineReplayer`.

4. **Execution Logic:**
   - Enable an additional log, `LTE_PHY_PDSCH_Stat_Indication`, prior to starting the log replay.
   - Execute the log replay process, ensuring that all configured logs are monitored and analyzed appropriately.

The outer script should be ready to execute, processing the logs in the specified directory and generating output based on the configurations and custom analyzer.
#!/usr/bin/python
# Filename: modem_debug_analyzer.py
"""
A debugger for cellular interface

Author: Yuanjie Li
"""


from mobile_insight.analyzer.analyzer import *

__all__ = ["ModemDebugAnalyzer"]


class ModemDebugAnalyzer(Analyzer):

    def __init__(self):
        Analyzer.__init__(self)

        self.add_source_callback(self.__msg_callback)

    def set_source(self, source):
        """
        Set the trace source. Enable the cellular signaling messages

        :param source: the trace source (collector).
        """
        Analyzer.set_source(self, source)

        # Phy-layer logs
        source.enable_log("Modem_debug_message")

    def __msg_callback(self, msg):

        if msg.type_id == "Modem_debug_message":

            log_item = msg.data.decode()

            if 'Msg' in log_item:
                self.log_info(log_item["Msg"])
