Prompt: I want you to define a class `MsgStatistics` that inherits from a base `Analyzer` class, and collects detailed statistics on cellular messages:

1. Class Definition: `MsgStatistics`
This class extends the `Analyzer` base class and initializes message type statistics, arrival intervals, and message length collections. It should be capable of reading all signaling messages by enabling all logs.

The `__msg_callback` function processes each incoming message. It updates the count for each message type, records the arrival time for each message to calculate intervals, and logs the message length if available.

2. Analysis Function: `analyze_log_file`
The outer analyzer script initializes an `OfflineReplayer` as the data source, setting the input path to a specified log file. It configures the source with an instance of `MsgStatistics` and runs the analysis process. The function should handle exceptions to ensure robust execution.

3. Execution Logic
Upon execution, the script initiates the analysis through the custom `MsgStatistics` analyzer. It then compiles the results, including:
   - Message type statistics: Totals for each message type.
   - Arrival intervals: Time intervals between consecutive messages of the same type, and the average interval.
   - Message length: List of lengths for each type and the average length.
   
The results are then saved into three separate text files: 'modified_msg_type_statistics.txt', 'modified_msg_arrival_rate.txt', and 'modified_msg_length.txt', each providing a detailed breakdown of the respective metrics.
#!/usr/bin/python
# Filename: msg_statistics.py
"""
A simple analyzer to study the cellular message statistics and arrival interval time

Author: Yuanjie Li
"""


from mobile_insight.analyzer.analyzer import *

__all__ = ["MsgStatistics"]


class MsgStatistics(Analyzer):

    def __init__(self):
        Analyzer.__init__(self)

        self.add_source_callback(self.__msg_callback)

        self.msg_type_statistics = {}  # type_id->msg_count

        self.msg_arrival_rate = {}  # type_id->list of arrival interval

        self.msg_lengh = {}  # type_id->list of message length

    def reset(self):
        self.msg_type_statistics = {}  # type_id->msg_count

        self.msg_arrival_rate = {}  # type_id->list of arrival interval

        self.msg_lengh = {}  # type_id->list of message length

    def set_source(self, source):
        """
        Set the trace source. Enable the cellular signaling messages

        :param source: the trace source (collector).
        """
        Analyzer.set_source(self, source)
        source.enable_log_all()

    def __msg_callback(self, msg):

        log_item = msg.data.decode()

        if msg.type_id not in self.msg_type_statistics:
            self.msg_type_statistics[msg.type_id] = 1
        else:
            self.msg_type_statistics[msg.type_id] = self.msg_type_statistics[msg.type_id] + 1

        if msg.type_id not in self.msg_arrival_rate:
            self.msg_arrival_rate[msg.type_id] = [log_item["timestamp"]]
        else:
            self.msg_arrival_rate[msg.type_id].append(log_item["timestamp"])

        if msg.type_id not in self.msg_lengh:

            if "log_msg_len" in log_item:
                self.msg_lengh[msg.type_id] = [log_item["log_msg_len"]]
            elif "Msg Length" in log_item:
                self.msg_lengh[msg.type_id] = [log_item["Msg Length"]]
            elif "Message Length" in log_item:
                self.msg_lengh[msg.type_id] = [log_item["Message Length"]]
            # TODO: For EMM/ESM, why the metadata header does not have msg
            # length?
        else:
            if "log_msg_len" in log_item:
                self.msg_lengh[msg.type_id].append(log_item["log_msg_len"])
            elif "Msg Length" in log_item:
                self.msg_lengh[msg.type_id].append(log_item["Msg Length"])
            elif "Message Length" in log_item:
                self.msg_lengh[msg.type_id].append(log_item["Message Length"])
