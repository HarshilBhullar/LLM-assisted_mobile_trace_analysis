Prompt: I want you to define a class `ModemDebugAnalyzerV2` that inherits from a base `Analyzer` class, and processes modem debug messages:

1. Class Definition: `ModemDebugAnalyzerV2`
This class extends from a base `Analyzer` class. Through `set_source`, it configures which signaling messages to read by enabling logs for "Modem_debug_message_v2".
The `__msg_callback` function processes messages based on their type:
  - Modem Debug Messages: Extracts and decodes the message data. It then calculates and logs the length of the message content, providing both the message content and its length as output.

2. Integration with Outer Analyzer
In the outer analyzer, `ModemDebugAnalyzerV2` will be used to analyze specific debug messages from a modem. It will be initialized and set with a data source, alongside other analyzers like `MsgLogger`. The processed information will be instrumental in debugging and understanding the modem's behavior by examining the message content and its length.

Note: This inner analyzer file is designed to work in conjunction with an outer analyzer script that sets up the data source and manages multiple analyzers for comprehensive offline analysis of cellular logs.
#!/usr/bin/python
# Filename: offline-analysis-example.py
import os
import sys

"""
Offline analysis by replaying logs
"""

# Import MobileInsight modules
from mobile_insight.monitor import OfflineReplayer
from mobile_insight.analyzer import MsgLogger, ModemDebugAnalyzer
if __name__ == "__main__":

    # Initialize a monitor
    src = OfflineReplayer()
    src.set_input_path("./logs/")
    # src.enable_log_all()

    src.enable_log("LTE_PHY_Serv_Cell_Measurement")
    src.enable_log("5G_NR_RRC_OTA_Packet")
    src.enable_log("LTE_RRC_OTA_Packet")
    src.enable_log("LTE_NB1_ML1_GM_DCI_Info")

    logger = MsgLogger()
    logger.set_decode_format(MsgLogger.XML)
    logger.set_dump_type(MsgLogger.FILE_ONLY)
    logger.save_decoded_msg_as("./test.txt")
    logger.set_source(src)

    modem_debug_analyzer = ModemDebugAnalyzer()
    modem_debug_analyzer.set_source(src)

    # Start the monitoring
    src.run()