Prompt: I want you to define a class `MsgStatisticsModified` that inherits from a base `Analyzer` class, and returns statistics for cellular messages, including message type counts, arrival intervals, and average message lengths:

1. Class Definition: `MsgStatisticsModified`
This class extends from a base `Analyzer` class. It should initialize and maintain dictionaries to store message type statistics, arrival intervals, lengths, and average lengths. The `set_source` method sets the trace source and enables all cellular signaling messages.

2. Message Processing: `__msg_callback`
The `__msg_callback` function processes each message to update the statistics:
   - For each message, update the count of the message type.
   - Record the timestamp for arrival intervals.
   - Capture the message length from fields like `log_msg_len`, `Msg Length`, or `Message Length`.
   - Calculate the average message length for each message type.

3. Reset Functionality: `reset`
Include a `reset` method to clear all statistics, allowing the analyzer to be reused for different analysis sessions.

This class will be used by the outer analyzer file to evaluate metrics such as message type statistics, arrival intervals, and average message lengths from offline log data.
#!/usr/bin/python
# Filename: msg-statistics-example.py
import os
import sys

# Import MobileInsight modules
from mobile_insight.monitor import OfflineReplayer
from mobile_insight.analyzer.msg_statistics import MsgStatistics

"""
This example shows how to get basic statistics of a offline log
"""
if __name__ == "__main__":

    # Initialize a 3G/4G monitor
    src = OfflineReplayer()
    src.set_input_path("./offline_log_example.mi2log")

    statistics = MsgStatistics()
    statistics.set_source(src)

    # Start the monitoring
    src.run()

    # Save results
    f_statistics = open('./msg_type_statistics.txt', 'w')
    for item in statistics.msg_type_statistics:
        f_statistics.write(
            item + " " + str(statistics.msg_type_statistics[item]) + "\n")
    f_statistics.close()

    f_rate = open('./msg_arrival_rate.txt', 'w')
    for item in statistics.msg_arrival_rate:
        f_rate.write(item + " ")
        for k in range(1, len(statistics.msg_arrival_rate[item])):
            f_rate.write(str(
                (statistics.msg_arrival_rate[item][k] - statistics.msg_arrival_rate[item][k - 1]).total_seconds() * 1000) + " ")
        f_rate.write("\n")
    f_rate.close()

    f_msg_len = open('./msg_length.txt', 'w')
    for item in statistics.msg_lengh:
        f_msg_len.write(item + " ")
        for k in range(0, len(statistics.msg_lengh[item])):
            f_msg_len.write(str(statistics.msg_lengh[item][k]) + " ")
        f_msg_len.write("\n")
    f_msg_len.close()
