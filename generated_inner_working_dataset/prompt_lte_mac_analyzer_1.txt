Prompt: I want you to define a class `LteMacAnalyzerModified` that inherits from a base `Analyzer` class, and provides a modified 4G MAC-layer analysis with additional metric evaluations.

1. Class Definition: `LteMacAnalyzerModified`
Extend the base `Analyzer` class. Implement the following features:
- Track and calculate the utilization of uplink (UL) grants, incorporating variance calculations.
- Analyze MAC layer buffer status and handle related calculations, such as packet delays and buffer management.
- Implement HARQ (Hybrid Automatic Repeat Request) failure tracking and broadcast information related to MAC retransmissions and RLC retransmissions.
- Use `set_source` to enable specific logs necessary for MAC layer analysis, including "LTE_MAC_UL_Tx_Statistics", "LTE_MAC_UL_Buffer_Status_Internal", and "LTE_PHY_PDSCH_Stat_Indication".
- Implement `__msg_callback` to process relevant log packets and extract, calculate, and log necessary information.
- Store relevant metrics and broadcast them for further analysis.

2. Analysis Function Integration:
The `LteMacAnalyzerModified` class should be integrated with an `OfflineReplayer` instance, configured to read trace logs from a specified input path. It should support error handling to manage exceptions during execution, ensuring robust operation.

3. Execution Logic:
Upon execution, the class processes log data, evaluates UL grant utilization and variance, analyzes buffer status, and records packet delays or retransmissions. All relevant metrics should be logged and broadcasted for further processing.
#!/usr/bin/python
# Filename: offline-analysis-example.py
import os
import sys

"""
Offline analysis by replaying logs
"""

# Import MobileInsight modules
from mobile_insight.monitor import OfflineReplayer
from mobile_insight.analyzer import MsgLogger,  LteMacAnalyzer

if __name__ == "__main__":

    # Initialize a monitor
    src = OfflineReplayer()
    src.set_input_path("./logs/")
    # src.enable_log_all()

    src.enable_log("LTE_PHY_Serv_Cell_Measurement")
    src.enable_log("5G_NR_RRC_OTA_Packet")
    src.enable_log("LTE_RRC_OTA_Packet")
    src.enable_log("LTE_NB1_ML1_GM_DCI_Info")

    logger = MsgLogger()
    logger.set_decode_format(MsgLogger.XML)
    logger.set_dump_type(MsgLogger.FILE_ONLY)
    logger.save_decoded_msg_as("./test.txt")
    logger.set_source(src)

    lte_mac_analyzer = LteMacAnalyzer()
    lte_mac_analyzer.set_source(src)

    # Start the monitoring
    src.run()