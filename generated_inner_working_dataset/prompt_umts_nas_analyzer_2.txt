Prompt: I want you to define a class `UmtsNasAnalyzerModified` that inherits from a base `ProtocolAnalyzer` class, and provides a modified analysis of the UMTS NAS layer (MM/GMM/CM/SM) for specific network events:

1. Class Definition: `UmtsNasAnalyzerModified`
This class extends from a base `ProtocolAnalyzer` class. The constructor initializes the base class and sets up packet filters to monitor specific signaling messages related to UMTS NAS. It should create state machines for MM, GMM, and CM layers to track the state transitions based on the incoming messages.

2. State Machines:
   - **MM State Machine**: Tracks transitions between states like 'MM_IDLE', 'MM_WAIT_FOR_NETWORK_COMMAND', 'MM_CONNECTION_ACTIVE', etc., based on the type and content of `UMTS_NAS_MM_State` messages.
   - **GMM State Machine**: Monitors transitions between 'GMM_REGISTERED' and 'GMM_DEREGISTERED' states as indicated by `UMTS_NAS_GMM_State` messages.
   - **CM State Machine**: Handles CM-related messages by tracking transitions like 'CM_SERVICE_REQUEST', 'CM_SETUP', 'CM_CALL_PROCEEDING', etc., through `UMTS_NAS_OTA_Packet` messages.

3. Analysis Functionality:
   - The `__nas_filter` function processes all relevant NAS (MM/GMM/CM/SM) packets by decoding the message content and updating the respective state machines. It should broadcast the current states and configurations, like QoS and DRX parameters, whenever there are changes.
   - Implement callback methods to update and log the MM, GMM, and NAS configurations based on the received messages. The analyzer should handle messages that carry key parameters, such as QoS settings and mobile identity, and update an internal status representation.

4. Execution Logic:
   - Upon execution, the analyzer should set the trace source to enable UMTS NAS logs required for the analysis, including messages for MM, GMM, and CM states.
   - Ensure the analyzer can be integrated with an outer script that initializes a data source and runs the analysis, capturing the decoded messages and updating the analyzer's state machines accordingly.
#!/usr/bin/python
# Filename: offline-analysis-example.py
import os
import sys

"""
Offline analysis by replaying logs
"""

# Import MobileInsight modules
from mobile_insight.monitor import OfflineReplayer
from mobile_insight.analyzer import MsgLogger, UmtsNasAnalyzer

if __name__ == "__main__":

    # Initialize a monitor
    src = OfflineReplayer()
    src.set_input_path("./logs/")
    # src.enable_log_all()

    src.enable_log("LTE_PHY_Serv_Cell_Measurement")
    src.enable_log("5G_NR_RRC_OTA_Packet")
    src.enable_log("LTE_RRC_OTA_Packet")
    src.enable_log("LTE_NB1_ML1_GM_DCI_Info")

    logger = MsgLogger()
    logger.set_decode_format(MsgLogger.XML)
    logger.set_dump_type(MsgLogger.FILE_ONLY)
    logger.save_decoded_msg_as("./test.txt")
    logger.set_source(src)

    umts_nas_analyzer = UmtsNasAnalyzer()
    umts_nas_analyzer.set_source(src)

    # Start the monitoring
    src.run()