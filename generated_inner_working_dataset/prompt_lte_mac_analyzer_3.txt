Prompt: I want you to define a class `ModifiedLteMacAnalyzer` that extends a base `Analyzer` class to perform a comprehensive analysis of the 4G MAC-layer with additional metrics. This class will be used in an outer analyzer script to evaluate specific metrics related to uplink grant utilization, buffer status, and retransmissions.

1. Class Definition: `ModifiedLteMacAnalyzer`
   - **Initialization**: The constructor initializes various internal states, including buffers for tracking bytes, control packet information, and HARQ processes. It also sets counters for total grants received and utilized.
   - **Source Configuration**: Through `set_source`, configure the analyzer to enable logs for "LTE_MAC_UL_Tx_Statistics", "LTE_MAC_UL_Buffer_Status_Internal", and "LTE_PHY_PDSCH_Stat_Indication" messages.
   - **Message Callback (`__msg_callback`)**: This function processes each message based on its type:
     - **LTE_MAC_UL_Tx_Statistics**: Calculates and logs the uplink grant utilization. It updates the total grants received and utilized and broadcasts this information.
     - **LTE_MAC_UL_Buffer_Status_Internal**: Handles buffer status updates, calculates delays for control packets, and broadcasts this delay information.
     - **LTE_PHY_PDSCH_Stat_Indication**: Analyzes downlink transport blocks to identify failed HARQ processes and their retransmissions. It calculates and logs delays for both MAC and RLC retransmissions.

2. Additional Functions:
   - **PDSCH Statistics Callback (`__msg_callback_pdsch_stat`)**: Processes PDSCH statistics to manage HARQ processes, track CRC results, and determine retransmission delays.

3. Key Outputs:
   - Broadcasts and logs various metrics such as UL grant utilization, control packet delays, queue lengths, and retransmission delays (for both MAC and RLC layers).

This inner analyzer file will be used in conjunction with an outer analyzer script, which initializes the `ModifiedLteMacAnalyzer`, sets the appropriate log sources, and processes logs to evaluate uplink and downlink performance metrics comprehensively. The outer analyzer script is responsible for setting up the data source and managing the execution flow for offline log analysis.
#!/usr/bin/python
# Filename: offline-analysis-example.py
import os
import sys

"""
Offline analysis by replaying logs
"""

# Import MobileInsight modules
from mobile_insight.monitor import OfflineReplayer
from mobile_insight.analyzer import MsgLogger,  LteMacAnalyzer

if __name__ == "__main__":

    # Initialize a monitor
    src = OfflineReplayer()
    src.set_input_path("./logs/")
    # src.enable_log_all()

    src.enable_log("LTE_PHY_Serv_Cell_Measurement")
    src.enable_log("5G_NR_RRC_OTA_Packet")
    src.enable_log("LTE_RRC_OTA_Packet")
    src.enable_log("LTE_NB1_ML1_GM_DCI_Info")

    logger = MsgLogger()
    logger.set_decode_format(MsgLogger.XML)
    logger.set_dump_type(MsgLogger.FILE_ONLY)
    logger.save_decoded_msg_as("./test.txt")
    logger.set_source(src)

    lte_mac_analyzer = LteMacAnalyzer()
    lte_mac_analyzer.set_source(src)

    # Start the monitoring
    src.run()