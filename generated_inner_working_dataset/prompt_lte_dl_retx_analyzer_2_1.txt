Prompt: I want you to define a class `LteDlRetxAnalyzerModified` that inherits from a base `Analyzer` class and calculates average MAC and RLC retransmission delays with adjusted metrics.

1. Class Definition: `LteDlRetxAnalyzerModified`
   - This class should extend from the base `Analyzer` class.
   - It should monitor downlink MAC retransmission delay and RLC retransmission delay.
   - The class should adjust the threshold for MAC retransmission delay.
   - Through `set_source`, it should configure which logs to read by enabling "LTE_RLC_UL_AM_All_PDU" and "LTE_RLC_DL_AM_All_PDU" logs.
   - The class should maintain entities for radio bearers and manage their state.

2. Radio Bearer Entity: `RadioBearerEntityModified`
   - This inner class should handle RLC data and control PDUs for each radio bearer.
   - It should maintain lists for packets received, packets in disorder, NACK packets, and detected loss times.
   - Implement methods to process received RLC data PDUs and control PDUs, updating appropriate lists and calculating retransmission delays.

3. Message Callback Functions:
   - Implement `__msg_callback` to handle incoming messages and direct them to the appropriate handler functions for uplink and downlink RLC messages.
   - Implement `__msg_rlc_ul_callback` to decode uplink RLC PDUs and process control PDUs for NACKs.
   - Implement `__msg_rlc_dl_callback` to decode downlink RLC PDUs and process data PDUs for retransmissions.

4. Execution Logic:
   - The outer analyzer script will initialize an `OfflineReplayer` and set the input path for the log file.
   - It will use an instance of `LteDlRetxAnalyzerModified` to analyze the logs and compute the average MAC and RLC retransmission delays.
   - The script will output these averages to the console.

Note: Ensure that the analyzer can handle large data sets efficiently and accurately calculate retransmission delays.
#!/usr/bin/python

import sys

from mobile_insight.monitor import OfflineReplayer
from mobile_insight.analyzer import LteDlRetxAnalyzer

if __name__ == "__main__":
	src = OfflineReplayer()
	src.set_input_path('./logs/offline_log_examples/20201115_181637_Xiaomi-Mi10_46000.mi2log')

	lteAnalyzer = LteDlRetxAnalyzer()
	lteAnalyzer.set_source(src)

	src.run()

	mac_delay = 0.0
	mac_delay_sample = 0
	
	rlc_delay = 0.0
	rlc_delay_sample = 0

	for _, bearer in lteAnalyzer.bearer_entity.items():
		for item in bearer.mac_retx:
			mac_delay += item['mac_retx']
		mac_delay_sample += len(bearer.mac_retx)

		for item in bearer.rlc_retx:
			rlc_delay += item['rlc_retx']
		rlc_delay_sample += len(bearer.rlc_retx)

	avg_mac_delay = float(mac_delay) / mac_delay_sample if mac_delay_sample > 0 else 0.0
	avg_rlc_delay = float(rlc_delay) / rlc_delay_sample if rlc_delay_sample > 0 else 0.0
	
	print("Average MAC retx delay is: ", avg_mac_delay)
	print("Average RLC retx delay is:", avg_rlc_delay)