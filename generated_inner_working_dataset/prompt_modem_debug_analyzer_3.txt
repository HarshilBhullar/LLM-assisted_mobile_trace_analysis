Prompt: I want you to define a class `ModifiedModemDebugAnalyzer` that inherits from a base `Analyzer` class to process modem debug messages:

1. Class Definition: `ModifiedModemDebugAnalyzer`
This class should extend from the base `Analyzer` class. It should set up to handle messages of type "Modem_debug_message" by enabling the appropriate log in `set_source`. The `__msg_callback` function processes each incoming message to extract and analyze its content.

2. Log Processing:
- The class should decode the message data from "Modem_debug_message".
- If a 'Msg' field is present in the decoded data, the message should be extracted.
- Perform a simple transformation on the extracted message by calculating its length.
- Log the original message and its calculated length using the `log_info` method for further analysis.

These instructions should be used to create the inner analyzer file, which will be compatible with the provided outer analyzer script.
#!/usr/bin/python
# Filename: offline-analysis-example.py
import os
import sys

"""
Offline analysis by replaying logs
"""

# Import MobileInsight modules
from mobile_insight.monitor import OfflineReplayer
from mobile_insight.analyzer import MsgLogger, ModemDebugAnalyzer
if __name__ == "__main__":

    # Initialize a monitor
    src = OfflineReplayer()
    src.set_input_path("./logs/")
    # src.enable_log_all()

    src.enable_log("LTE_PHY_Serv_Cell_Measurement")
    src.enable_log("5G_NR_RRC_OTA_Packet")
    src.enable_log("LTE_RRC_OTA_Packet")
    src.enable_log("LTE_NB1_ML1_GM_DCI_Info")

    logger = MsgLogger()
    logger.set_decode_format(MsgLogger.XML)
    logger.set_dump_type(MsgLogger.FILE_ONLY)
    logger.save_decoded_msg_as("./test.txt")
    logger.set_source(src)

    modem_debug_analyzer = ModemDebugAnalyzer()
    modem_debug_analyzer.set_source(src)

    # Start the monitoring
    src.run()