Prompt: I want you to define a class `ModifiedUplinkLatencyAnalyzer` that inherits from a base `Analyzer` class, which is used to monitor uplink packet waiting and processing latency with additional metrics. This class will be used in another script to evaluate uplink latency analysis metrics.

1. Class Definition: `ModifiedUplinkLatencyAnalyzer`
The constructor initializes the `Analyzer` base class and sets up various metrics, including frame number (`fn`), subframe number (`sfn`), cumulative error blocks, cumulative blocks, and a MAC buffer for packet queueing. It also maintains lists for all packets and transmitted packets and a temporary dictionary for calculating latencies.

2. Source Configuration: `set_source`
Configure the analyzer to monitor specific cellular signaling messages by enabling logs for "LTE_PHY_PUSCH_Tx_Report" and "LTE_MAC_UL_Buffer_Status_Internal".

3. Message Processing: `__msg_callback`
Processes incoming messages to compute waiting, transmission, and retransmission latencies:
   - For "LTE_PHY_PUSCH_Tx_Report" messages, it calculates retransmission latency and updates the cumulative block counters. It also manages the temporary dictionary to store and process these latencies.
   - For "LTE_MAC_UL_Buffer_Status_Internal" messages, it updates the MAC buffer and manages packet queues, calculating waiting and transmission latencies for outgoing buffers.

4. Utility Functions
   - `__f_time_diff`: Computes the difference in frame time between two time points.
   - `__f_time`: Returns the current frame time based on `fn` and `sfn`.
   - `__cmp_queues`: Manages the queue of packets by comparing them based on transmission type.
   - `update_time`: Updates the current frame and subframe time based on system frame number and subframe number.

The outer script will use this class to run an analysis, calculate total and average latencies, and print the results.
#!/usr/bin/python

import os
import sys
import shutil
import traceback

import matplotlib.pyplot as plt
import numpy as np

from mobile_insight.monitor import OfflineReplayer
from mobile_insight.analyzer import UplinkLatencyAnalyzer



def uplink_latency_analysis():
    src = OfflineReplayer()
    # src.set_input_path("./logs/latency_sample.mi2log")
    src.set_input_path('./logs/offline_log_examples/20201115_181637_Xiaomi-Mi10_46000.mi2log')
    # print (sys.argv[1])

    analyzer = UplinkLatencyAnalyzer()
    analyzer.set_source(src)

    src.run()

    return analyzer


stats = uplink_latency_analysis()
# print stats.all_packets
# print stats.cum_err_block
# print stats.cum_block

total_latency = 0
total_wait = 0
total_trans = 0
total_retx = 0

total_retx = 8 * stats.cum_err_block[0]
for latency in stats.all_packets:
  total_wait += latency['Waiting Latency']
  total_trans += latency['Tx Latency']
  total_retx += latency['Retx Latency']

total_latency = total_wait + total_trans + total_retx
n = len(stats.all_packets)

if (n > 0):
  print ("Average latency is:", float(total_latency) / n)
  print ("Average waiting latency is:", float(total_wait) / n)
  print ("Average tx latency is:", float(total_trans) / n)
  print ("Average retx latency is:", float(total_retx) / n)
else:
  print ("Certain message type(s) missing in the provided log.")

