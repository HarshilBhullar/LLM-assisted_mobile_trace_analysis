Prompt: I want you to define a class `ModifiedLteDlRetxAnalyzer` that inherits from a base `Analyzer` class, and calculates downlink MAC retransmission delay and RLC retransmission delay with additional metrics:

1. Class Definition: `ModifiedLteDlRetxAnalyzer`
This class extends from a base `Analyzer` class. Through `set_source`, it configures which signaling messages to read by enabling logs for "LTE_RLC_UL_AM_All_PDU" and "LTE_RLC_DL_AM_All_PDU". It should create and manage instances of `RadioBearerEntity` for each relevant radio bearer configuration index.

2. `RadioBearerEntity` Class:
This helper class is responsible for managing the state and logic for a specific radio bearer entity. It maintains lists and dictionaries to track received packets, packet reordering, maximum sequence numbers, NACK packets, and detected packet loss times. It also calculates MAC and RLC retransmission delays.

3. Message Processing:
The `ModifiedLteDlRetxAnalyzer` class should implement the `__msg_callback` function to handle incoming messages. It distinguishes between uplink and downlink RLC PDU messages and delegates processing to the appropriate methods: `__msg_rlc_ul_callback` and `__msg_rlc_dl_callback`.

4. Retransmission Logic:
- **RLC Data Reception:** When receiving RLC data PDUs, the class should track sequence numbers, detect retransmissions, and calculate delays for both MAC and RLC retransmissions.
- **RLC Control Reception:** When receiving RLC control PDUs, it should monitor NACK sequences and update loss detection timing. It should also track if retransmissions occur before NACKs are processed.

5. Execution Logic:
Upon execution, which is triggered via command-line with an input file path, the class processes the logs through the configured analyzer. It aggregates retransmission metrics for all bearer entities and provides an interface for accessing these metrics, specifically focusing on MAC and RLC retransmission delays and their respective counts. This data can be accessed by an outer analyzer script to compute average delays and display the metrics.
#!/usr/bin/python

import sys

from mobile_insight.monitor import OfflineReplayer
from mobile_insight.analyzer import LteDlRetxAnalyzer

if __name__ == "__main__":
	src = OfflineReplayer()
	src.set_input_path('./logs/offline_log_examples/20201115_181637_Xiaomi-Mi10_46000.mi2log')

	lteAnalyzer = LteDlRetxAnalyzer()
	lteAnalyzer.set_source(src)

	src.run()

	mac_delay = 0.0
	mac_delay_sample = 0
	
	rlc_delay = 0.0
	rlc_delay_sample = 0

	for _, bearer in lteAnalyzer.bearer_entity.items():
		for item in bearer.mac_retx:
			mac_delay += item['mac_retx']
		mac_delay_sample += len(bearer.mac_retx)

		for item in bearer.rlc_retx:
			rlc_delay += item['rlc_retx']
		rlc_delay_sample += len(bearer.rlc_retx)

	avg_mac_delay = float(mac_delay) / mac_delay_sample if mac_delay_sample > 0 else 0.0
	avg_rlc_delay = float(rlc_delay) / rlc_delay_sample if rlc_delay_sample > 0 else 0.0
	
	print("Average MAC retx delay is: ", avg_mac_delay)
	print("Average RLC retx delay is:", avg_rlc_delay)