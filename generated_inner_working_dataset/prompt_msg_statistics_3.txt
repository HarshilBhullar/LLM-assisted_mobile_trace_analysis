Prompt: I want you to define a class `ModifiedMsgStatistics` that extends a base `Analyzer` class, which will be used to study cellular message statistics, arrival interval time, and average message length. This class will be used in an external script to generate various statistics files.

1. Class Definition: `ModifiedMsgStatistics`
The `ModifiedMsgStatistics` class should extend from the `Analyzer` class. It should be able to initialize counters and lists to store the number of messages per type, arrival intervals, and lengths of messages. Additionally, it should compute the average message length for each message type.

2. Message Handling: `__msg_callback`
Create a `__msg_callback` method that processes each incoming message. It should:
   - Update the message count for each type.
   - Record the timestamp of each message to calculate the arrival intervals.
   - Capture the message length from the decoded message data.
   - Compute the average message length for each message type whenever a new message is processed.

3. Source Configuration: `set_source`
Implement a `set_source` method to set the trace source and enable all cellular signaling message logs.

The `ModifiedMsgStatistics` class will be used in an outer script that initializes a data source, runs the analysis, and generates output files for message type statistics, message arrival intervals, and message lengths. This outer script will save these results to text files after the analysis is complete.
#!/usr/bin/python
# Filename: msg-statistics-example.py
import os
import sys

# Import MobileInsight modules
from mobile_insight.monitor import OfflineReplayer
from mobile_insight.analyzer.msg_statistics import MsgStatistics

"""
This example shows how to get basic statistics of a offline log
"""
if __name__ == "__main__":

    # Initialize a 3G/4G monitor
    src = OfflineReplayer()
    src.set_input_path("./offline_log_example.mi2log")

    statistics = MsgStatistics()
    statistics.set_source(src)

    # Start the monitoring
    src.run()

    # Save results
    f_statistics = open('./msg_type_statistics.txt', 'w')
    for item in statistics.msg_type_statistics:
        f_statistics.write(
            item + " " + str(statistics.msg_type_statistics[item]) + "\n")
    f_statistics.close()

    f_rate = open('./msg_arrival_rate.txt', 'w')
    for item in statistics.msg_arrival_rate:
        f_rate.write(item + " ")
        for k in range(1, len(statistics.msg_arrival_rate[item])):
            f_rate.write(str(
                (statistics.msg_arrival_rate[item][k] - statistics.msg_arrival_rate[item][k - 1]).total_seconds() * 1000) + " ")
        f_rate.write("\n")
    f_rate.close()

    f_msg_len = open('./msg_length.txt', 'w')
    for item in statistics.msg_lengh:
        f_msg_len.write(item + " ")
        for k in range(0, len(statistics.msg_lengh[item])):
            f_msg_len.write(str(statistics.msg_lengh[item][k]) + " ")
        f_msg_len.write("\n")
    f_msg_len.close()
