Prompt: I want you to define a class `NrRrcAnalyzerModified` that inherits from a base `ProtocolAnalyzer` class, and processes NR RRC messages to derive cell configurations and connectivity status:

1. Class Definition: `NrRrcAnalyzerModified`
The class should extend from the `ProtocolAnalyzer` class, initializing necessary packet filters and internal states for cell status, history, and configurations. It must be able to process 5G NR RRC packets by parsing XML data and updating connection status and configurations accordingly.

2. Message Processing Function: `__rrc_filter`
This function should filter and process incoming NR RRC packets. It should update the connection status based on frequency and cell ID, and invoke callbacks to handle different parts of the RRC messages: connection setup, system information blocks (SIBs), and reconfiguration messages. The function should log relevant information and maintain a history of cell connections.

3. Callback Functions:
   - `__callback_sib_config`: Extract configurations from System Information Blocks (SIBs), logging information such as threshold settings and preferences.
   - `__callback_rrc_reconfig`: Extract and log configurations from RRCReconfiguration messages, including measurement profiles and report configurations.
   - `__callback_rrc_conn`: Update and log the RRC connectivity status based on message content.
   
4. Utility Functions:
   - `__update_conn`: Update the current cell status based on frequency and cell ID extracted from the RRC messages.
   - `get_cell_list`: Return a list of all cell IDs associated with the device.
   - `get_cell_config`: Retrieve the active or idle-state configuration for a given cell.
   - `get_cur_cell_status`: Return the current cell's connectivity status and configuration.
   - `get_mobility_history`: Provide a history of all cells the device has been connected to.

This class should be used to analyze NR RRC messages and provide insights into cell configurations and connectivity, supporting the outer analyzer script that logs the analysis results.
#!/usr/bin/python
# Filename: offline-analysis-example.py
import os
import sys

"""
Offline analysis by replaying logs
"""

# Import MobileInsight modules
from mobile_insight.monitor import OfflineReplayer
from mobile_insight.analyzer import MsgLogger, \
    NrRrcAnalyzer

if __name__ == "__main__":

    # Initialize a monitor
    src = OfflineReplayer()
    src.set_input_path("./logs/")
    # src.enable_log_all()

    src.enable_log("LTE_PHY_Serv_Cell_Measurement")
    src.enable_log("5G_NR_RRC_OTA_Packet")
    src.enable_log("LTE_RRC_OTA_Packet")
    src.enable_log("LTE_NB1_ML1_GM_DCI_Info")

    logger = MsgLogger()
    logger.set_decode_format(MsgLogger.XML)
    logger.set_dump_type(MsgLogger.FILE_ONLY)
    logger.save_decoded_msg_as("./test.txt")
    logger.set_source(src)

    # Analyzers
    nr_rrc_analyzer = NrRrcAnalyzer()
    nr_rrc_analyzer.set_source(src)  # bind with the monitor
   
    src.run()