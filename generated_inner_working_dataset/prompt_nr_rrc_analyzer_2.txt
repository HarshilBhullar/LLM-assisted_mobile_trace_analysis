Prompt: I want you to define a class `NrRrcAnalyzerModified` that inherits from a base `ProtocolAnalyzer` class, and performs analysis on NR Radio Resource Control (RRC) protocol with modified metrics:

1. Class Definition: `NrRrcAnalyzerModified`
   - This class extends the `ProtocolAnalyzer` class to provide analysis on NR RRC protocols.
   - It should initialize packet filters to capture NR RRC OTA packets and process them using a custom callback method `__rrc_filter`.
   - The class should maintain the current cell status, a history of cell status over time, and configurations for each cell identified by its frequency and cell ID.

2. Packet Processing Function: `__rrc_filter`
   - This function filters and processes all incoming NR RRC packets.
   - It should convert packet messages into XML format and invoke specific callback methods for RRC connection and reconfiguration events.
   - For `5G_NR_RRC_OTA_Packet` messages, extract connection and configuration data, updating cell status and configurations as necessary.

3. RRC Connection Status Callback: `__callback_rrc_conn`
   - This function updates the current RRC connectivity status based on certain message fields indicating setup complete or release.
   - It logs the current status after any connectivity change.

4. RRC Reconfiguration Callback: `__callback_rrc_reconfig`
   - This function extracts and modifies configurations from RRC reconfiguration messages.
   - It should update measurement objects, report configurations, and measurement report configurations with modified calculations for frequency and hysteresis.

5. Configuration and Status Management:
   - Implement methods to initialize and update the current cell's status and configurations using frequency and cell ID.
   - Methods should be provided to retrieve the current cell's ID, frequency, status, and configuration details, as well as the history of traversed cells.

6. Main Execution and Logging:
   - The analyzer should log updates to cell configurations and status changes.
   - Use these logs to evaluate specific metrics related to NR RRC events.

Note: This class will be used with an outer analyzer file that sets up the trace source and executes the NR RRC analysis using this modified analyzer class.
#!/usr/bin/python
# Filename: offline-analysis-example.py
import os
import sys

"""
Offline analysis by replaying logs
"""

# Import MobileInsight modules
from mobile_insight.monitor import OfflineReplayer
from mobile_insight.analyzer import MsgLogger, \
    NrRrcAnalyzer

if __name__ == "__main__":

    # Initialize a monitor
    src = OfflineReplayer()
    src.set_input_path("./logs/")
    # src.enable_log_all()

    src.enable_log("LTE_PHY_Serv_Cell_Measurement")
    src.enable_log("5G_NR_RRC_OTA_Packet")
    src.enable_log("LTE_RRC_OTA_Packet")
    src.enable_log("LTE_NB1_ML1_GM_DCI_Info")

    logger = MsgLogger()
    logger.set_decode_format(MsgLogger.XML)
    logger.set_dump_type(MsgLogger.FILE_ONLY)
    logger.save_decoded_msg_as("./test.txt")
    logger.set_source(src)

    # Analyzers
    nr_rrc_analyzer = NrRrcAnalyzer()
    nr_rrc_analyzer.set_source(src)  # bind with the monitor
   
    src.run()