Prompt: I want you to define a class `MmAnalyzerModified` that inherits from a base `Analyzer` class, and processes various network state changes related to UMTS and LTE:

1. Class Definition: `MmAnalyzerModified`
This class extends from a base `Analyzer` class. It should be capable of analyzing the Mobility Management (MM) state changes of a mobile phone. The class will manage multiple lists that track time spans for different network events: normal service, PLMN search, attach, location update, and routing area update for both UMTS and LTE networks. Additionally, it will track LTE-specific configurations such as TAU QoS info, cell reselection to UMTS, DRX configuration, and TDD configuration.

2. Functionality:
- The class should define methods to start and end tracking time spans for various events. Use helper functions like `start_span` and `end_span` to manage these events efficiently.
- Implement a `set_source` method to configure the data source and enable all logs initially.
- Define a `__filter` method to process incoming events, decoding them from XML and dispatching to appropriate handlers based on event type.
- Implement callback methods for each event type to handle specific message processing: 
  - For UMTS-related events, focus on NAS GMM and NAS OTA packets.
  - For LTE-related events, handle NAS EMM state, NAS OTA packets, and RRC OTA packets.
  - For WCDMA, extract information from RRC OTA packets.

3. Data Handling:
- For UMTS, track normal service, PLMN search, attach, location update, and routing area update spans.
- For LTE, track normal service, PLMN search, attach, and TAU spans, and log additional configuration details like TAU QoS info, cell reselection to UMTS, DRX, and TDD configurations.
- Ensure handling of out-of-order timestamps to maintain consistent state tracking.
- Utilize regular expressions to parse specific fields from XML content.

4. Performance Considerations:
- Efficiently manage state changes and transitions by using helper functions and maintaining a clean separation of logic for different network types and events.
- Provide methods to retrieve logs for analysis, ensuring encapsulation and clear data access patterns.
#!/usr/bin/python
# Filename: offline-analysis-example.py
import os
import sys

"""
Offline analysis by replaying logs
"""

# Import MobileInsight modules
from mobile_insight.monitor import OfflineReplayer
from mobile_insight.analyzer import MsgLogger, MmAnalyzer

if __name__ == "__main__":

    # Initialize a monitor
    src = OfflineReplayer()
    src.set_input_path("./logs/")
    # src.enable_log_all()

    src.enable_log("LTE_PHY_Serv_Cell_Measurement")
    src.enable_log("5G_NR_RRC_OTA_Packet")
    src.enable_log("LTE_RRC_OTA_Packet")
    src.enable_log("LTE_NB1_ML1_GM_DCI_Info")

    logger = MsgLogger()
    logger.set_decode_format(MsgLogger.XML)
    logger.set_dump_type(MsgLogger.FILE_ONLY)
    logger.save_decoded_msg_as("./test.txt")
    logger.set_source(src)

    mm_analyzer = MmAnalyzer()
    mm_analyzer.set_source(src)

    # Start the monitoring
    src.run()