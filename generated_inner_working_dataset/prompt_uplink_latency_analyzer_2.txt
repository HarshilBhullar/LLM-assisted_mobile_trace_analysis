Prompt: I want you to define a class `UplinkLatencyAnalyzerModified` that inherits from a base `Analyzer` class, and monitors uplink packet waiting and processing latency with additional metrics:

1. Class Definition: `UplinkLatencyAnalyzerModified`
The class should extend from the `Analyzer` base class. It should initialize variables to track various statistics like cumulative error blocks, cumulative blocks, and latency metrics. It should also introduce additional metrics, such as cumulative retransmission latency.

2. Set Source Function: `set_source`
Configure the source within this function to read specific cellular signaling messages by enabling logs for "LTE_PHY_PUSCH_Tx_Report" and "LTE_MAC_UL_Buffer_Status_Internal".

3. Message Callback Function: `__msg_callback`
Implement the message processing logic based on message types:
   - For "LTE_PHY_PUSCH_Tx_Report" messages, process transmission and retransmission details, updating statistics such as cumulative error blocks and retransmission latency.
   - For "LTE_MAC_UL_Buffer_Status_Internal" messages, manage packet queueing and buffering logic to calculate waiting and transmission latency for uplink packets. This involves tracking the buffer status and updating the packet queue accordingly.

4. Helper Functions:
   - Implement helper functions to calculate time differences and manage the packet queue. This includes logic to calculate waiting and transmission latencies and updating the packet queue based on buffer changes.

5. Analysis Output:
   - Ensure that processed statistics and latency metrics are accessible for further analysis. This includes cumulative retransmission latency, waiting latency, transmission latency, and details of individual packets.

Note: The `UplinkLatencyAnalyzerModified` class will be utilized in an outer analyzer file to perform uplink latency analysis on trace logs, providing insights into average latencies and retransmission metrics.
#!/usr/bin/python

import os
import sys
import shutil
import traceback

import matplotlib.pyplot as plt
import numpy as np

from mobile_insight.monitor import OfflineReplayer
from mobile_insight.analyzer import UplinkLatencyAnalyzer



def uplink_latency_analysis():
    src = OfflineReplayer()
    # src.set_input_path("./logs/latency_sample.mi2log")
    src.set_input_path('./logs/offline_log_examples/20201115_181637_Xiaomi-Mi10_46000.mi2log')
    # print (sys.argv[1])

    analyzer = UplinkLatencyAnalyzer()
    analyzer.set_source(src)

    src.run()

    return analyzer


stats = uplink_latency_analysis()
# print stats.all_packets
# print stats.cum_err_block
# print stats.cum_block

total_latency = 0
total_wait = 0
total_trans = 0
total_retx = 0

total_retx = 8 * stats.cum_err_block[0]
for latency in stats.all_packets:
  total_wait += latency['Waiting Latency']
  total_trans += latency['Tx Latency']
  total_retx += latency['Retx Latency']

total_latency = total_wait + total_trans + total_retx
n = len(stats.all_packets)

if (n > 0):
  print ("Average latency is:", float(total_latency) / n)
  print ("Average waiting latency is:", float(total_wait) / n)
  print ("Average tx latency is:", float(total_trans) / n)
  print ("Average retx latency is:", float(total_retx) / n)
else:
  print ("Certain message type(s) missing in the provided log.")

